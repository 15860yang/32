C51 COMPILER V9.00   NRF24L01                                                              06/09/2020 13:29:51 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE NRF24L01
OBJECT MODULE PLACED IN NRF24L01.obj
COMPILER INVOKED BY: D:\Keil_v4\C51\BIN\C51.EXE NRF2401\NRF24L01.c LARGE BROWSE INCDIR(.\NRF2401;.\Usart;.\LCD1602;.\XPT
                    -2406) DEBUG OBJECTEXTEND PRINT(.\NRF24L01.lst) OBJECT(NRF24L01.obj)

line level    source

   1          /*************************************DoWell电子******************************************************
   2          @文件名    : nRF24L01.c
   3          @描述              : nRF24l01无线模块底层驱动
   4          @实验平台  : nRF24l01无线模块+STC89C52最小系统板（带有nRF24L01模块接口）
   5          @
   6          @作者      :镁天   QQ:1402330827                技术讨论/支持QQ群:121597570(加群请通过旺旺向店主获得验证码)
   7          @
   8          @电子邮箱  :wshww123@yeah.net
   9          @
  10          @
  11          @版权归属  : 部分代码来源网络，由DoWell电子整理修改，供给学习参考使用
  12          ****************************************************************************************************/
  13          #include <reg52.h>
  14          #include "NRF24L01.h"
  15          #include "Type_Define.h"
  16          
  17          uchar const code TX_ADDRESS[TX_ADR_WIDTH]= {0x30,0x30,0x30,0x30,0x30};  //本地地址
  18          uchar const code RX_ADDRESS[RX_ADR_WIDTH]= {0x30,0x30,0x30,0x30,0x30};  //接收地址
  19          
  20                  
  21          //*************************************中断标志********************************************
  22          //以下任意一个中断都会使IRQ引脚编程低电平，判断IRQ引脚就可以知道当前接收或者发送的状态了
  23          uchar   bdata NRF24L01_Sta;        //状态标志
  24          sbit      RX_DR =NRF24L01_Sta^6;                        //接收中断标志
  25          sbit      TX_DS =NRF24L01_Sta^5;                        //发送中断标志
  26          sbit      MAX_RT        =NRF24L01_Sta^4;                //重发次数中断标志，当重发次数超过了最大允许的重发次数该中断产生
  27          
  28          /********************************************************************************
  29          @函数名称:      Delay_us()
  30          @描述：                 普通延时函数，us级延时函数
  31          @输入：           n  延时的时间长度
  32          @输出：                 无
  33          @返回：                 无
  34          @注意事项：     无
  35          ********************************************************************************/
  36          void Delay_us(uint n)
  37          {
  38   1              for(;n>0;n--) ;
  39   1      }
  40          /********************************************************************************
  41          @函数名称:      Init_NRF24L01()
  42          @描述：                 24L01初始化函数
  43          @输入：                 无
  44          @输出：                 无
  45          @返回：                 无
  46          @注意事项：     无
  47          ********************************************************************************/
  48          void Init_NRF24L01(void)
  49          {
  50   1              Delay_us(100);
  51   1              IRQ = 1; //中断端口初始化为高
  52   1              CE=0;    // 芯片使能
  53   1              CSN=1;   // SPI 失能，即禁止2401芯片的SPI功能
  54   1              SCK=0;   // 初始化SPI时钟
C51 COMPILER V9.00   NRF24L01                                                              06/09/2020 13:29:51 PAGE 2   

  55   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 设置本地地址        
  56   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 设置接收地址
  57   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
  58   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21 
  59   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0xF5); //  设置自动重发的延时和次数  延时大小4000+86us 次数5次 
  60   1              SPI_RW_Reg(WRITE_REG + RF_CH, 0x88);         //   设置信道工作为2.4GHZ，收发必须一致
  61   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为32字节
  62   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x0f);   //设置发射速率为2Mbps，发射功率为最大值0dB
  63   1              //相对于接收，初始化的时候只有下面这句不同
  64   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x5e);           // IRQ收发完成中断响应，16位CRC ，主发送
  65   1      
  66   1              SPI_RW_Reg(WRITE_REG+STATUS,0x71);              //清除通道0中断标志
  67   1              CE = 1;                                                                                                                                         //片选失能
  68   1              Delay_us(400);
  69   1      }
  70          /********************************************************************************
  71          @函数名称:      SPI_RW()
  72          @描述：                 24L01的读写函数
  73          @输入：                 dat  发送的数据
  74          @输出：                 无
  75          @返回：                 dat  接收到的数据
  76          @注意事项：     根据需要决定是发送数据有效，还是接收数据有效
  77          ********************************************************************************/
  78          uchar SPI_RW(uchar dat)         //发送dat数据，并返回接收到得数据
  79          {
  80   1              uchar Bit_Count;                                //位计数器，用于确定接收或者发送的位数，这里是一个字节即8位
  81   1              for(Bit_Count=0;Bit_Count<8;Bit_Count++) 
  82   1              {
  83   2                      MOSI = (dat & 0x80);         // 输出数据, MSB to MOSI，即先送高位后送低位
  84   2                      dat = (dat << 1);            // 右移一位，准备传送下一个数据
  85   2                      SCK = 1;                     // 设置 SCK 为高
  86   2                      dat |= MISO;                           // 接收2401传出的数据，也是先送高位后送低位
  87   2                      SCK = 0;                             // 拉低SCK时钟产生下降沿，从MOSI送出数据，在下一次SCK为高时读入NISO数据
  88   2              }
  89   1              return(dat);                                            
  90   1      }
  91          /********************************************************************************
  92          @函数名称:      SPI_RW()
  93          @描述：                 24L01的读写函数
  94          @输入：                 dat  发送的数据
  95          @输出：                 无
  96          @返回：                 dat  接收到的数据
  97          @注意事项：     根据需要决定是发送数据有效，还是接收数据有效
  98          ********************************************************************************/
  99          uchar SPI_Read(uchar reg)
 100          {
 101   1              uchar reg_val;
 102   1              
 103   1              CSN = 0;                // CSN 拉低, 启动SPI通信
 104   1              SPI_RW(reg);            // 设置读取的寄存器
 105   1              reg_val = SPI_RW(0xff); // 读出寄存器中的数据
 106   1              CSN = 1;                // CSN 拉高, 终止SPI通信
 107   1              
 108   1              return(reg_val);        // 返回接收到的数据
 109   1      }
 110          /********************************************************************************
 111          @函数名称:      SPI_RW_Reg()
 112          @描述：                 24L01的读写寄存器函数
 113          @输入：                 reg   寄存器地址
 114                                                          value 写入的数据
 115          @输出：                 无
 116          @返回：                 status 当前寄存器的状态
C51 COMPILER V9.00   NRF24L01                                                              06/09/2020 13:29:51 PAGE 3   

 117          @注意事项：     先写寄存器地址，即选择寄存器，然后再写入数据
 118          ********************************************************************************/
 119          uchar SPI_RW_Reg(uchar reg, uchar value)
 120          {
 121   1              uchar status;
 122   1              
 123   1              CSN = 0;                   // CSN 拉低, 启动SPI通信
 124   1              status = SPI_RW(reg);      // 选择要操作的寄存器
 125   1              SPI_RW(value);             // 向选择的寄存器中写入数据
 126   1              CSN = 1;                   // CSN 拉高, 终止SPI通信
 127   1              
 128   1              return(status);            // 返回2401 reg寄存器的状态
 129   1      }
 130          /********************************************************************************
 131          @函数名称:      SPI_Read_Buf()
 132          @描述：                 读取2401接收数据寄存器的数据
 133          @输入：                 reg      寄存器地址
 134                                                          pBuf     接收数据指针
 135                                                          Byte_Num 接收数据的字节数
 136          @输出：                 无
 137          @返回：                 status 当前寄存器的状态
 138          @注意事项：     先设置读寄存器地址，然后再读数据
 139          ********************************************************************************/
 140          uchar SPI_Read_Buf(uchar reg, uchar *pBuf, uchar Byte_Num)
 141          {
 142   1              uchar status,Byte_Count;
 143   1              
 144   1              CSN = 0;                                   // CSN 拉低, 启动SPI通信
 145   1              status = SPI_RW(reg);                      // 设置读取的寄存器和该寄存器的状态  
 146   1              for(Byte_Count=0;Byte_Count<Byte_Num;Byte_Count++)
 147   1              {
 148   2                      pBuf[Byte_Count] = SPI_RW(0xff);  // 连续接收uchars个数据 
 149   2              }
 150   1              CSN = 1;                           
 151   1              
 152   1              return(status);                    // 返回24L01的状态
 153   1      }
 154          /********************************************************************************
 155          @函数名称:      SPI_Write_Buf()
 156          @描述：                 向nRF24L01数据寄存器写入数据
 157          @输入：                 reg      寄存器地址
 158                                                          pBuf     待写入数据地址指针
 159                                                          Byte_Num 接收数据的字节数
 160          @输出：                 无
 161          @返回：                 status 当前寄存器的状态
 162          @注意事项：     先写寄存器地址，即选择寄存器，然后再写入数据
 163          ********************************************************************************/
 164          uchar SPI_Write_Buf(uchar reg, uchar *pBuf, uchar Byte_Num)
 165          {
 166   1              uchar status,Byte_Count;
 167   1              
 168   1              CSN = 0;            //SPI使能       
 169   1              status = SPI_RW(reg);   
 170   1              for(Byte_Count = 0; Byte_Count < Byte_Num; Byte_Count++) 
 171   1              {
 172   2                      SPI_RW(*pBuf++); //指向下一个数据
 173   2              }
 174   1              CSN = 1;           //关闭SPI
 175   1              return(status);    //返回24L01的状态 
 176   1      }
 177          /********************************************************************************
 178          @函数名称:      SetRX_Mode()
C51 COMPILER V9.00   NRF24L01                                                              06/09/2020 13:29:51 PAGE 4   

 179          @描述：                 nRF24L01接收配置 
 180          @输入：                 无
 181          @输出：                 无
 182          @返回：                 无
 183          @注意事项：     无
 184          ********************************************************************************/
 185          void SetRX_Mode(void)
 186          {
 187   1              CE=0;                                                                                                                                   //片选使能
 188   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x3F); // IRQ收发完成中断响应，16位CRC   ，上电，接收模式
 189   1              CE = 1;                                                                                                                         //片选失能
 190   1              Delay_us(400);
 191   1      }
 192          /********************************************************************************
 193          @函数名称:      nRF24L01_RxPacket()
 194          @描述：                 检测nRF24L01接收数据状态，把接收数据放到rx_buf缓冲区指针中
 195          @输入：                 rx_buf  接收数据缓冲地址指针
 196          @输出：                 无                                                                                                                                                                                                                
 197          @返回：                 ReceiveComplete_Flag  完成数据接收标志  0  未接收数据   1 数据接收成功
 198          @注意事项：     无
 199          ********************************************************************************/
 200          uchar NRF24L01_RxPacket(uchar *rx_buf)
 201          {
 202   1        uchar ReceiveComplete_Flag = 0; //接收数据完成且成功标志位
 203   1      
 204   1              if(IRQ == 0)                              // 判断是否接收到数据
 205   1              {
 206   2                      NRF24L01_Sta = SPI_Read(STATUS);        // 读取状态寄存其来判断数据接收状况
 207   2                      if(RX_DR == 1)
 208   2                {
 209   3                              CE = 0;                                       //SPI使能
 210   3                              SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// 从接收缓冲器中读出数据
 211   3                              ReceiveComplete_Flag = 1;                             //读取数据完成标志
 212   3                      }
 213   2                      SPI_RW_Reg(WRITE_REG+STATUS,0x71);    //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来清除中断标志          
 214   2                      CE = 1;
 215   2                      //while(!IRQ);                                                                                                  //等待传输完毕
 216   2                      SetRX_Mode();                                                                                           //设置为接收模式
 217   2                      
 218   2              }       
 219   1              
 220   1              return ReceiveComplete_Flag;                                    //返回接收状态
 221   1      }
 222          /********************************************************************************
 223          @函数名称:      nRF24L01_TxPacket()
 224          @描述：                 装载数据到nRF24L01
 225          @输入：                 tx_buf  发送数据缓冲地址指针
 226          @输出：                 无                                                                                                                                                                                                                
 227          @返回：                 无
 228          @注意事项： 先设置接收端的地址，应答时需要，接收端地址需要与发送端一致。接着装载
 229                                                    要发送的数据，最后设置为发送模式，把CE设置为高电平启动发送，时间最少为10us
 230          ********************************************************************************/
 231          void NRF24L01_TxPacket(uchar * tx_buf)
 232          {
 233   1              CE=0;                                 //待机 I模式      
 234   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
 235   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf,TX_PLOAD_WIDTH);                             // 装载数据      
 236   1              SPI_RW_Reg(WRITE_REG + CONFIG,0x5e);                                 // IRQ收发完成中断响应，16位CRC，主发送
 237   1              CE=1;                           //置高CE，激发数据发送
 238   1              Delay_us(1000);                           //在下一次操作前需要延时一段时间，10us即可    
 239   1              //while(IRQ == 1);
 240   1              SPI_RW_Reg(WRITE_REG+STATUS,0X71); // 清除通道0状态标志 
C51 COMPILER V9.00   NRF24L01                                                              06/09/2020 13:29:51 PAGE 5   

 241   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    451    ----
   CONSTANT SIZE    =     10    ----
   XDATA SIZE       =   ----      16
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
